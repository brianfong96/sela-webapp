// Generated by Xata Codegen 0.28.4. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "study",
    columns: [
      { name: "name", type: "string", notNull: true, defaultValue: "Untitled" },
      { name: "owner", type: "string" },
      { name: "public", type: "bool", defaultValue: "false" },
      { name: "starred", type: "bool", defaultValue: "false" },
      { name: "passage", type: "text", notNull: true, defaultValue: "1" },
    ],
    revLinks: [{ column: "studyId", table: "styling" }],
  },
  {
    name: "heb_bible",
    columns: [
      { name: "hebId", type: "int" },
      { name: "book", type: "string" },
      { name: "chapter", type: "int" },
      { name: "verse", type: "int" },
      { name: "wlcWord", type: "string" },
      { name: "hebUnicode", type: "string" },
      { name: "strongNumber", type: "float" },
      { name: "gloss", type: "string" },
      { name: "morphology", type: "string" },
      { name: "WLCsort", type: "int" },
      { name: "poetryMarker", type: "bool" },
      { name: "paragraphMarker", type: "bool" },
    ],
  },
  {
    name: "styling",
    columns: [
      { name: "studyId", type: "link", link: { table: "study" } },
      { name: "colorFill", type: "string" },
      { name: "borderColor", type: "string" },
      { name: "textColor", type: "string" },
      { name: "hebId", type: "int", notNull: true, defaultValue: "0" },
      { name: "numIndent", type: "int", defaultValue: "0" },
      { name: "indented", type: "bool", defaultValue: "false" },
      { name: "stropheDiv", type: "bool" },
    ],
  },
  {
    name: "heb_bible_bsb",
    columns: [
      { name: "hebId", type: "int" },
      { name: "book", type: "string" },
      { name: "chapter", type: "int" },
      { name: "verse", type: "int" },
      { name: "wlcWord", type: "string" },
      { name: "hebUnicode", type: "string" },
      { name: "strongNumber", type: "float" },
      { name: "gloss", type: "string" },
      { name: "morphology", type: "string" },
      { name: "WLCsort", type: "int" },
      { name: "poetryMarker", type: "bool" },
      { name: "paragraphMarker", type: "bool" },
      { name: "verseBreak", type: "bool" },
      { name: "BSBnewStanza", type: "bool" },
      {
        name: "stropheBreak",
        type: "bool",
        notNull: true,
        defaultValue: "false",
      },
    ],
  },
  {
    name: "heb_bible_bsb_0524",
    columns: [
      { name: "hebId", type: "int" },
      { name: "book", type: "string" },
      { name: "chapter", type: "int" },
      { name: "verse", type: "int" },
      { name: "wlcWord", type: "string" },
      { name: "hebUnicode", type: "string" },
      { name: "strongNumber", type: "float" },
      { name: "gloss", type: "string" },
      { name: "morphology", type: "string" },
      { name: "WLCsort", type: "int" },
      { name: "poetryMarker", type: "bool" },
      { name: "paragraphMarker", type: "bool" },
      { name: "verseBreak_q1", type: "bool" },
      { name: "verseBreak_q2", type: "bool" },
      { name: "BSBnewStanza", type: "bool" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Study = InferredTypes["study"];
export type StudyRecord = Study & XataRecord;

export type HebBible = InferredTypes["heb_bible"];
export type HebBibleRecord = HebBible & XataRecord;

export type Styling = InferredTypes["styling"];
export type StylingRecord = Styling & XataRecord;

export type HebBibleBsb = InferredTypes["heb_bible_bsb"];
export type HebBibleBsbRecord = HebBibleBsb & XataRecord;

export type HebBibleBsb0524 = InferredTypes["heb_bible_bsb_0524"];
export type HebBibleBsb0524Record = HebBibleBsb0524 & XataRecord;

export type DatabaseSchema = {
  study: StudyRecord;
  heb_bible: HebBibleRecord;
  styling: StylingRecord;
  heb_bible_bsb: HebBibleBsbRecord;
  heb_bible_bsb_0524: HebBibleBsb0524Record;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://BiblePoetry-s-workspace-ab123i.us-east-1.xata.sh/db/main",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
